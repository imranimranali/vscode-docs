<!DOCTYPE html>
<html>
<head>
    <title>Brick Breaker Game</title>
    <style>
        #gameCanvas {
            position: absolute;
            top: 0;
            left: 0;
            background-color: #000;
        }

        #paddle {
            position: absolute;
            bottom: 0;
            width: 100px;
            height: 10px;
            background-color: #fff;
        }

        .brick {
            width: 75px;
            height: 20px;
            margin: 2px;
            background-color: #fff;
            border-radius: 5px;
        }

        #ball {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: #fff;
            border-radius: 50%;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="600"></canvas>

    <script>
        // Game canvas and context
        var canvas = document.getElementById("gameCanvas");
        var ctx = canvas.getContext("2d");

        // Paddle properties
        var paddleWidth = 100;
        var paddleHeight = 10;
        var paddleX = (canvas.width - paddleWidth) / 2;
        var paddleDx = 7;

        // Ball properties
        var ballRadius = 5;
        var ballX = canvas.width / 2;
        var ballY = canvas.height - paddleHeight - ballRadius;
        var ballDx = 2;
        var ballDy = -2;

        // Brick properties
        var brickRowCount = 5;
        var brickColumnCount = 8;
        var brickWidth = 75;
        var brickHeight = 20;
        var brickPadding = 2;
        var brickOffsetTop = 30;
        var brickOffsetLeft = 30;

        // Create bricks
        var bricks = [];
        for (var c = 0; c < brickColumnCount; c++) {
            bricks[c] = [];
            for (var r = 0; r < brickRowCount; r++) {
                bricks[c][r] = { x: 0, y: 0, status: 1 };
            }
        }

        // Key event listeners
        document.addEventListener("keydown", keyDownHandler);
        document.addEventListener("keyup", keyUpHandler);

        function keyDownHandler(e) {
            if (e.keyCode == 39) {
                paddleDx = 7;
            } else if (e.keyCode == 37) {
                paddleDx = -7;
            }
        }

        function keyUpHandler(e) {
            if (e.keyCode == 39 || e.keyCode == 37) {
                paddleDx = 0;
            }
        }

        // Collision detection
        function collisionDetection() {
            for (var c = 0; c < brickColumnCount; c++) {
                for (var r = 0; r < brickRowCount; r++) {
                    var brick = bricks[c][r];
                    if (brick.status == 1) {
                        if (
                            ballX > brick.x &&
                            ballX < brick.x + brickWidth &&
                            ballY > brick.y &&
                            ballY < brick.y + brickHeight
                        ) {
                            ballDy = -ballDy;
                            brick.status = 0;
                        }
                    }
                }
            }
        }

        // Draw
        // Draw bricks
        function drawBricks() {
            for (var c = 0; c < brickColumnCount; c++) {
                for (var r = 0; r < brickRowCount; r++) {
                    if (bricks[c][r].status == 1) {
                        var brickX = c * (brickWidth + brickPadding) + brickOffsetLeft;
                        var brickY = r * (brickHeight + brickPadding) + brickOffsetTop;
                        bricks[c][r].x = brickX;
                        bricks[c][r].y = brickY;
                        ctx.beginPath();
                        ctx.rect(brickX, brickY, brickWidth, brickHeight);
                        ctx.fillStyle = "#fff";
                        ctx.fill();
                        ctx.closePath();
                    }
                }
            }
        }

        // Draw paddle
        function drawPaddle() {
            ctx.beginPath();
            ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
            ctx.fillStyle = "#fff";
            ctx.fill();
            ctx.closePath();
        }

        // Draw ball
        function drawBall() {
            ctx.beginPath();
            ctx.arc(ballX, ballY, ballRadius, 0, Math.PI * 2);
            ctx.fillStyle = "#fff";
            ctx.fill();
            ctx.closePath();
        }

        // Game loop
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            drawBricks();
            drawPaddle();
            drawBall();
            collisionDetection();

            // Ball movement
            ballX += ballDx;
            ballY += ballDy;

            // Paddle movement
            paddleX += paddleDx;

            // Ball collision with walls
            if (ballX + ballRadius > canvas.width || ballX - ballRadius < 0) {
                ballDx = -ballDx;
            }

            if (ballY - ballRadius < 0) {
                ballDy = -ballDy;
            }

            // Ball collision with paddle
            if (
                ballY + ballRadius > canvas.height - paddleHeight &&
                ballX > paddleX &&
                ballX < paddleX + paddleWidth
            ) {
                ballDy = -ballDy;
            }

            // Paddle boundary check
            if (paddleX + paddleWidth > canvas.width) {
                paddleX = canvas.width - paddleWidth;
            }

            if (paddleX < 0) {
                paddleX = 0;
            }

            requestAnimationFrame(draw);
        }

        draw();
    </script>
</body>
</html>
